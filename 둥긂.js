(async () => {
	console.log("둥긂 불러오는 중...");
	const util = await import("https://vlzi.github.io/entry/둥긂_utils.js");//await import("./둥긂_utils.js");
	const vc = Entry.variableContainer;
	const fvname = () => vc.variables_.length ? vc.variables_[0].name_ : "대상 없음", flname = () => vc.lists_.length ? vc.lists_[0].name_ : "대상 없음";
	function getv(name) {
		const variable = vc.getVariableByName(name);
		if (variable) return variable;
		else util.raise("변수를 찾을 수 없습니다.");
	}
	function getl(name) {
		const list = vc.getListByName(name);
		if (list) return list;
		else util.raise("리스트를 찾을 수 없습니다.");
	}
	util.change("set_visible_answer", [{num : 0, default : "숨기기"}], (sprite, script) => {
		const bool = script.getValue('BOOL', script);
		if (bool === '숨기기') {
		Entry.container.inputValue.setVisible(false);
		} else if (bool === '보이기'){
			Entry.container.inputValue.setVisible(true);
		}
		else util.raise("숨기기/보이기를 입력하세요.");
		return script.callReturn();
	});
	util.change("get_variable", [{num : 0, default : fvname()}], (sprite, script) => getv(script.getValue("VARIABLE")).getValue());
	util.change("change_variable", [{num : 0, default : fvname()}], function func(sprite, script) { var value = script.getValue('VALUE', script); var fixed = 0; if (value == false && typeof value === 'boolean') { throw new Error('Type is not correct'); } var variable = getv(script.getValue("VARIABLE", script)); var isRealTime_ = variable.isRealTime_; var variableValue = variable.getValue(); var sumValue; if (Entry.Utils.isNumber(value) && variable.isNumber()) { value = Entry.parseNumber(value); variableValue = Entry.parseNumber(variableValue); fixed = Entry.getMaxFloatPoint([value, variable.getValue()]); sumValue = new BigNumber(value).plus(variableValue).toNumber().toFixed(fixed); } else { sumValue = "".concat(variableValue).concat(value); } if (!isRealTime_) { variable.setValue(sumValue); return script.callReturn(); } else { return new Promise( /*#__PURE__*/function () { var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(resolve, reject) { return _regenerator["default"].wrap(function _callee$(_context) { while (1) { switch (_context.prev = _context.next) { case 0: _context.prev = 0; _context.next = 3; return variable.setValue(sumValue); case 3: resolve(); _context.next = 9; break; case 6: _context.prev = 6; _context.t0 = _context["catch"](0); reject(_context.t0); case 9: case "end": return _context.stop(); } } }, _callee, null, [[0, 6]]); })); return function (_x, _x2) { return _ref.apply(this, arguments); }; }()); } });
	util.change("set_variable", [{num : 0, default : fvname()}], function func(sprite, script) { var value = script.getValue('VALUE', script); var variable = getv(script.getValue("VARIABLE", script)); var isRealTime_ = variable.isRealTime_; if (!isRealTime_) { variable.setValue(value); return script.callReturn(); } else { return new Promise( /*#__PURE__*/function () { var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(resolve, reject) { return _regenerator["default"].wrap(function _callee2$(_context2) { while (1) { switch (_context2.prev = _context2.next) { case 0: _context2.prev = 0; _context2.next = 3; return variable.setValue(value); case 3: resolve(); _context2.next = 9; break; case 6: _context2.prev = 6; _context2.t0 = _context2["catch"](0); reject(_context2.t0); case 9: case "end": return _context2.stop(); } } }, _callee2, null, [[0, 6]]); })); return function (_x3, _x4) { return _ref2.apply(this, arguments); }; }()); } });
	util.change("show_variable", [{num : 0, default : fvname()}], function func(sprite, script) { var variableId = script.getField('VARIABLE', script); var variable = getv(script.getValue("VARIABLE", script)); variable.setVisible(true); variable.updateView(); return script.callReturn(); });
	util.change("hide_variable", [{num : 0, default : fvname()}], function func(sprite, script) { var variableId = script.getField('VARIABLE', script); var variable = getv(script.getValue("VARIABLE", script)); variable.setVisible(false); return script.callReturn(); });
	util.change("value_of_index_from_list", [{num : 1, default : flname()}], function func(sprite, script) { var index = script.getValue('INDEX', script); var list = getl(script.getValue("LIST", script)); index = Entry.getListRealIndex(index, list); var array = list.getArray(); if (!array || !Entry.Utils.isNumber(index) || index > array.length) { throw new Error('can not insert value to array'); } return array[index - 1].data; });
	util.change("add_value_to_list", [{num : 1, default : flname()}], function func(sprite, script) { var value = script.getValue('VALUE', script); var list = getl(script.getValue("LIST", script)); if (!list.isCloud_) { list.appendValue(value); return script.callReturn(); } else { return new Promise( /*#__PURE__*/function () { var _ref3 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(resolve, reject) { return _regenerator["default"].wrap(function _callee3$(_context3) { while (1) { switch (_context3.prev = _context3.next) { case 0: _context3.prev = 0; _context3.next = 3; return list.appendValue(value); case 3: resolve(); _context3.next = 9; break; case 6: _context3.prev = 6; _context3.t0 = _context3["catch"](0); reject(_context3.t0); case 9: case "end": return _context3.stop(); } } }, _callee3, null, [[0, 6]]); })); return function (_x5, _x6) { return _ref3.apply(this, arguments); }; }()); } });
	util.change("remove_value_from_list", [{num : 1, default : flname()}], function func(sprite, script) { var value = script.getValue('VALUE', script); var list = getl(script.getValue("LIST", script)); var array = list.getArray(); if (!array || !Entry.Utils.isNumber(value) || value > array.length) { throw new Error('can not remove value from array'); } var isRealTime_ = list.isRealTime_; if (!isRealTime_) { list.deleteValue(+value); return script.callReturn(); } else { return new Promise( /*#__PURE__*/function () { var _ref4 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(resolve, reject) { return _regenerator["default"].wrap(function _callee4$(_context4) { while (1) { switch (_context4.prev = _context4.next) { case 0: _context4.prev = 0; _context4.next = 3; return list.deleteValue(+value); case 3: resolve(); _context4.next = 9; break; case 6: _context4.prev = 6; _context4.t0 = _context4["catch"](0); reject(_context4.t0); case 9: case "end": return _context4.stop(); } } }, _callee4, null, [[0, 6]]); })); return function (_x7, _x8) { return _ref4.apply(this, arguments); }; }()); } });
	util.change("insert_value_to_list", [{num : 1, default : flname()}], function func(sprite, script) { var _script$getValues = script.getValues(['DATA', 'INDEX'], script), _script$getValues2 = (0, _slicedToArray2["default"])(_script$getValues, 2), data = _script$getValues2[0], index = _script$getValues2[1]; var list = getl(script.getValue("LIST", script)); var array = list.getArray(); if (!array || !Entry.Utils.isNumber(index) || index == 0 || index > array.length + 1) { throw new Error('can not insert value to array'); } var isRealTime_ = list.isRealTime_; if (!isRealTime_) { list.insertValue(index, data); return script.callReturn(); } else { return new Promise( /*#__PURE__*/function () { var _ref5 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5(resolve, reject) { return _regenerator["default"].wrap(function _callee5$(_context5) { while (1) { switch (_context5.prev = _context5.next) { case 0: _context5.prev = 0; _context5.next = 3; return list.insertValue(index, data); case 3: resolve(); _context5.next = 9; break; case 6: _context5.prev = 6; _context5.t0 = _context5["catch"](0); reject(_context5.t0); case 9: case "end": return _context5.stop(); } } }, _callee5, null, [[0, 6]]); })); return function (_x9, _x10) { return _ref5.apply(this, arguments); }; }()); } });
	util.change("change_value_list_index", [{num : 0, default : flname()}], function func(sprite, script) { var _script$getValues3 = script.getValues(['DATA', 'INDEX'], script), _script$getValues4 = (0, _slicedToArray2["default"])(_script$getValues3, 2), data = _script$getValues4[0], index = _script$getValues4[1]; var list = getl(script.getValue("LIST", script)); var array = list.getArray(); if (!array || !Entry.Utils.isNumber(index) || index > array.length) { throw new Error('can not insert value to array'); } var isRealTime_ = list.isRealTime_; if (!isRealTime_) { list.replaceValue(index, data); return script.callReturn(); } else { return new Promise( /*#__PURE__*/function () { var _ref6 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee6(resolve, reject) { return _regenerator["default"].wrap(function _callee6$(_context6) { while (1) { switch (_context6.prev = _context6.next) { case 0: _context6.prev = 0; _context6.next = 3; return list.replaceValue(index, data); case 3: resolve(); _context6.next = 9; break; case 6: _context6.prev = 6; _context6.t0 = _context6["catch"](0); reject(_context6.t0); case 9: case "end": return _context6.stop(); } } }, _callee6, null, [[0, 6]]); })); return function (_x11, _x12) { return _ref6.apply(this, arguments); }; }()); } });
	util.change("length_of_list", [{num : 1, default : flname()}], function func(sprite, script) { var list = getl(script.getValue("LIST", script)); return list.getArray().length; });
	util.change("is_included_in_list", [{num : 1, default : flname()}], function func(sprite, script) { var data = script.getStringValue('DATA', script); var list = getl(script.getValue("LIST", script)); if (!list) { return false; } var arr = list.getArray(); for (var i = 0, len = arr.length; i < len; i++) { if (arr[i].data.toString() == data.toString()) { return true; } } return false; });
	util.change("show_list", [{num : 0, default : flname()}], function func(sprite, script) { var list = getl(script.getValue("LIST", script)); list.setVisible(true); return script.callReturn(); });
	util.change("hide_list", [{num : 0, default : flname()}], function func(sprite, script) { var list = getl(script.getValue("LIST", script)); list.setVisible(false); return script.callReturn(); });
		    
	util.update();
	console.log("둥긂 불러오기 완료");
	console.log(Entry.playground.blockMenu._categoryData);
})();
